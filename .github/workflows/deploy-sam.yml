name: Deploy SAM Backend - Development

on:
  push:
    branches: [ dev-backend-integration ]
    paths:
      - 'template.yaml'
      - 'src/**'
      - 'samconfig*.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'template.yaml'
      - 'src/**'
      - 'samconfig*.toml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      cleanup:
        description: 'Cleanup dev resources after testing'
        required: false
        default: false
        type: boolean

jobs:
  deploy-sam:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
      STACK_NAME: christopher-corbin-portfolio-backend-${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Setup AWS SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Build SAM application
      run: sam build
    
    - name: Validate required secrets
      run: |
        if [[ -z "${{ secrets.CONTACT_EMAIL }}" ]]; then
          echo "‚ùå Error: CONTACT_EMAIL secret is not set"
          echo "Please add CONTACT_EMAIL to your GitHub repository secrets"
          exit 1
        fi
        echo "‚úÖ CONTACT_EMAIL secret is configured"
        
        # Set default CORS origin if not provided
        CORS_ORIGIN="*"
        if [[ -n "${{ secrets.CLOUDFRONT_DOMAIN }}" ]]; then
          CORS_ORIGIN="https://${{ secrets.CLOUDFRONT_DOMAIN }}"
        fi
        echo "CORS_ORIGIN=$CORS_ORIGIN" >> $GITHUB_ENV
    
    - name: Deploy SAM application
      run: |
        sam deploy \
          --config-env $ENVIRONMENT \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name $STACK_NAME \
          --capabilities CAPABILITY_IAM \
          --region us-east-1 \
          --parameter-overrides \
            "ContactEmail=${{ secrets.CONTACT_EMAIL }}" \
            "CorsOrigin=$CORS_ORIGIN" \
            "Environment=$ENVIRONMENT"
    
    - name: Get and test API Gateway URL
      run: |
        echo "‚è≥ Retrieving API Gateway URL..."
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --region us-east-1 \
          --query 'Stacks[0].Outputs[?OutputKey==`ContactApiUrl`].OutputValue' \
          --output text)
        
        if [[ -n "$API_URL" && "$API_URL" != "None" ]]; then
          echo "‚úÖ Contact API URL: $API_URL"
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "üöÄ Backend deployed to $ENVIRONMENT environment!"
        else
          echo "‚ùå Error: Could not retrieve API URL"
          exit 1
        fi
    
    - name: Test API endpoint
      run: |
        echo "üß™ Testing API endpoint..."
        response=$(curl -s -w "%{http_code}" -X POST "$API_URL" \
          -H "Content-Type: application/json" \
          -d '{
            "name": "GitHub Actions Test",
            "email": "test@github-actions.com",
            "message": "Automated test from $ENVIRONMENT deployment pipeline"
          }')
        
        http_code=${response: -3}
        if [[ $http_code -eq 200 ]]; then
          echo "‚úÖ API test passed - HTTP $http_code"
        else
          echo "‚ùå API test failed - HTTP $http_code"
          echo "Response: ${response%???}"
          exit 1
        fi
    
    - name: Cleanup dev resources (if requested)
      if: github.event.inputs.cleanup == 'true' && env.ENVIRONMENT == 'dev'
      run: |
        echo "üßπ Cleaning up development resources..."
        aws cloudformation delete-stack \
          --stack-name $STACK_NAME \
          --region us-east-1
        
        echo "‚è≥ Waiting for stack deletion..."
        aws cloudformation wait stack-delete-complete \
          --stack-name $STACK_NAME \
          --region us-east-1
        
        echo "‚úÖ Development resources cleaned up successfully!"
    
    - name: Comment on PR with deployment info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## üöÄ Backend Deployment Complete
          
          **Environment**: \`${process.env.ENVIRONMENT}\`
          **API URL**: \`${process.env.API_URL}\`
          **Stack Name**: \`${process.env.STACK_NAME}\`
          
          ### ‚úÖ Tests Passed
          - API endpoint is responding correctly
          - CORS configuration is working
          - Contact form integration ready
          
          ### üß™ Test the API
          \`\`\`bash
          curl -X POST "${process.env.API_URL}" \\
            -H "Content-Type: application/json" \\
            -d '{
              "name": "Your Name",
              "email": "your@email.com",
              "message": "Test message"
            }'
          \`\`\`
          
          Ready for merge to main branch! üéâ`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
